{"pageProps":{"posts":[{"id":2,"title":"在维基农场上为初始语言并非 zh 的 MediaWiki 站点添加语言变体/简繁转换功能","created_at":"2024-05-13T05:15:12Z","updated_at":"2024-05-13T05:15:12Z","content":"在 [DOL 中文 wiki](https://degreesoflewditycn.miraheze.org/) 中，或由于初始设置失误，语言设置为 `zh-CN` 而非 `zh`。根据 [MediaWiki 文档](https://www.mediawiki.org/wiki/Manual:$wgDisableLangConversion/zh)，只有语言设置为 `zh` 才能启用自带的变体转换功能（以 `$wgDisableLangConversion` 设置）。\r\n\r\n## 用户界面语言和站点内容语言\r\n\r\n首先需由[文档](https://www.mediawiki.org/wiki/Manual:Language)明确，MediaWiki 的语言分为三种：\r\n\r\n- 站点内容语言（Site content language）\r\n- 用户界面语言（User interface language，API 调用为 `mw.user.options.values.language`）\r\n- 页面内容语言（Page content language）\r\n\r\n其中页面内容语言极少需要配置，绝大部分情况下，都默认与 `站点内容语言` 一致，在此忽略。\r\n\r\n`站点内容语言` 决定了 `html` 的 `lang` 属性，在默认情况下，也决定了 wiki 具体内容的语言，实际使用上，主要有标题（`#firstHeading`）和内容（`#mw-content-text`）两部分。\r\n\r\n`用户界面语言` 决定了基础界面的 `lang` 属性，这些基础界面也就是“用户界面消息”（User interface message）。用户界面消息大部分由 MediaWiki 自动生成，例如命名空间的“User”（`en`）和“用户”（`zh`），能够随 `用户界面语言` 改变自己改变语言；但有一部分用户界面消息来自 MediaWiki 命名空间，最常用的如 `MediaWiki:Sidebar` 为侧边栏（`#site-navigation`），其 `lang` 属性虽能随 `用户界面语言` 改变而改变，具体内容却不会自动变化，需要额外设置用户界面消息。\r\n\r\n## 清除用户界面消息缓存\r\n\r\n作为往往在每个页面都有使用的内容，用户界面消息有着强大的缓存。根据 [MediaWiki 文档](https://www.mediawiki.org/wiki/Manual:$wgLanguageCode)，更改 wiki 语言（`$wgLanguageCode`）后，需清除用户界面消息缓存，否则会无法显示新语言界面消息，或新旧语言界面消息混杂。其中提供了两种方法。\r\n\r\n在 MediaWiki 1.18 及以上，运行\r\n\r\n```shell\r\necho 'MediaWiki\\MediaWikiServices::getInstance()->getMessageCache()->clear()' | php maintenance/eval.php\r\n```\r\n\r\n在 MediaWiki 1.18 以下，则手动运行 `maintenance/rebuildmessages.php`。\r\n\r\n在 Miraheze 这样的维基农场中，往往无法如此清除缓存，需要等待很长时间自动清除，可能会对期间访问站点的用户造成困扰。\r\n\r\n## 设置 `$wgForceUIMsgAsContentMsg`\r\n\r\n经指点并查[文档](https://www.mediawiki.org/wiki/Manual:$wgForceUIMsgAsContentMsg)，亦可以设置 `$wgForceUIMsgAsContentMsg`，将用户界面消息设置为内容消息，即能够自己转换。\r\n\r\n显然，在维基农场中，也不可改动这个设置。\r\n\r\n## 编写自定义变体脚本\r\n\r\n试模拟原变体功能，在内容页面右上排按钮（`.mw-list-item`）中添加变体按钮，加入全站加载的 `MediaWiki:Common.js` 中。\r\n\r\n### opencc-js\r\n\r\n[OpenCC](https://github.com/BYVoid/OpenCC) 是非常常用的一个简繁转换工具，凭借巨大的词库，可以实现各地不同繁体的转换，故欲以此编写转换脚本。原工具为 npm 包，难以直接使用，但有衍生 JavaScript 版本 [opencc-js](https://github.com/nk2028/opencc-js)，此处则使用此版本。\r\n\r\n摘抄用法如下：\r\n\r\n```js\r\n// Set Chinese convert from Traditional (Hong Kong) to Simplified (Mainland China)\r\nconst converter = OpenCC.Converter({ from: 'hk', to: 'cn' });\r\n// Set the conversion starting point to the root node, i.e. convert the whole page\r\nconst rootNode = document.documentElement;\r\n// Convert all elements with attributes lang='zh-HK'. Change attribute value to lang='zh-CN'\r\nconst HTMLConvertHandler = OpenCC.HTMLConverter(converter, rootNode, 'zh-HK', 'zh-CN');\r\nHTMLConvertHandler.convert(); // Convert  -> 汉语\r\nHTMLConvertHandler.restore(); // Restore  -> 漢語\r\n```\r\n\r\n由此按照 `lang` 属性转换的特性，可以为需转换内容设置不存在的 `lang` 属性，如 `zh-to-convert`，实现不影响其他部分的转换；对于易误转换的内容，如 `textarea`，也可以设置如 `zh-not-convert` 的 `lang` 属性，随后用 `restore` 方法转回原文。\r\n\r\n特别是在 MediaWiki 中，需要转换的元素主要为标题（`#firstHeading`）、侧边栏（`#site-navigation`）、内容（`#mw-content-text`），这些部分的特点是具有 MediaWiki 根据 `站点内容语言` 或 `用户界面语言` 设定设置的 `lang` 属性；然而，`html` 同样拥有此属性，因此不能直接根据原属性转换。\r\n\r\nopencc-js 亦支持自定义词典，在 wiki 实际使用中应很有用处，但暂不研究。\r\n\r\n### 外部脚本加载问题\r\n\r\nMediaWiki 中，传统的引入外部脚本的方式为使用 `mw.loader.load`。\r\n\r\n```js\r\nmw.loader.load( 'https://cdn.jsdelivr.net/npm/opencc-js@1.0.5/dist/umd/full.js' );\r\n```\r\n\r\n然而，当网络情况不佳或脚本稍大（如 opencc-js）时，会出现未加载完成的情况。\r\n\r\n幸而，在 MediaWiki 1.33 中，新增了一种引入外部脚本的方式，为 `mw.loader.getScript`，其会传回一个 Promise 对象。无需知道 Promise 对象的含义，只需参考[示例代码](https://www.mediawiki.org/wiki/ResourceLoader/Core_modules#mw.loader.getScript)，就能实现外部脚本加载完后执行函数。\r\n\r\n```js\r\nmw.loader.getScript( 'https://cdn.jsdelivr.net/npm/opencc-js@1.0.5/dist/umd/full.js' )\r\n.then(function(){\r\n    // 之后执行的内容\r\n});\r\n```\r\n\r\n### 只支持 ES5 的屑 MediaWiki\r\n\r\n调试时可能出现报错，说明只能使用 ES5 语法。ES6 2015 年即推出，目前已经普遍支持，很容易不小心写出来。例如模板字符串、箭头函数等。\r\n\r\n> 实现目前的需求，将 ES6 语法重构为 ES5 语法不是很难。对于重构困难的脚本，可以通过以 `mw.loader.load` 加载脚本的方法在 MediaWiki 中使用 ES6。\r\n\r\n## 结果\r\n\r\n以下为暂用的脚本，实现以 `localStorage` 存储用户偏好的变体转换，理论上可适用于所有 wiki，只需微调 CSS。\r\n\r\n```js\r\n// 载入 openccjs\r\nmw.loader.getScript( 'https://cdn.jsdelivr.net/npm/opencc-js@1.0.5/dist/umd/full.js' )\r\n.then(function(){\r\n$(function(){ // DOM 加载后操作\r\n\r\n// 设置转换工具，简体 -> 港繁/台繁，台繁 -> 简体\r\nconst cth = OpenCC.Converter({ from: 'cn', to: 'hk' });\r\nconst ttc = OpenCC.Converter({ from: 'tw', to: 'cn' });\r\nconst ctt = OpenCC.Converter({ from: 'cn', to: 'tw' });\r\n\r\n// 设置必要的 lang 属性以备后续转换\r\n$('#firstHeading').attr('lang', 'zh-to-convert');\r\n$('#site-navigation ul').attr('lang', 'zh-to-convert');\r\n$('#site-navigation h3').attr('lang', 'zh-to-convert');\r\n$('#mw-content-text').attr('lang', 'zh-to-convert');\r\nif($('textarea')) { $('textarea').attr('lang', 'zh-not-convert'); }\r\n\r\n// 检查 localStorage 并转换\r\nconst rootNode = document.documentElement;\r\nconst HTMLConvertHandler = {\r\n    \"cn\": OpenCC.HTMLConverter(ttc, rootNode, 'zh-to-convert', 'zh-CN'),\r\n    \"hk\": OpenCC.HTMLConverter(cth, rootNode, 'zh-to-convert', 'zh-HK'),\r\n    \"tw\": OpenCC.HTMLConverter(ctt, rootNode, 'zh-to-convert', 'zh-TW'),\r\n}\r\nif (localStorage.getItem('opencc')) {\r\n    HTMLConvertHandler[localStorage.getItem('opencc')].convert();\r\n    $('#opencc').val(localStorage.getItem('opencc'));\r\n}\r\n\r\n// 插入样式和按钮\r\n$('<style>.mw-list-item select {color: #68d;padding: inherit;padding-right: 2em;background-color: transparent;cursor: pointer;border: none;}.mw-list-item select:hover {border: none;}</style>').appendTo('body');\r\n$('<li class=\"mw-list-item\"><select name=\"opencc\" id=\"opencc\"><option value=\"\">不转换</option><option value=\"cn\">大陆简体</option><option value=\"hk\">港澳繁体</option><option value=\"tw\">台湾繁体</option></select></li>').appendTo($('#p-views ul'));\r\n\r\n// 用户修改变体后，设置 localStorage 并刷新\r\n$('#opencc').change(function() {\r\n    localStorage.setItem('opencc', event.target.value);\r\n    location.reload();\r\n});\r\n});\r\n});\r\n```\r\n\r\n效果如下：\r\n\r\n![效果](https://p.sda1.dev/14/54b68f6a606d0f24cf6e52e6f530e875/QQ截图20231112182613.png)\r\n\r\n## 补遗\r\n\r\n> The site content language (`ContentLanguage` service in `MediaWiki\\MediaWikiServices::getContentLanguage`, based on `$wgLanguageCode`), which **should generally stay the same as long as the wiki exists**.\r\n\r\n最好的方法永远是保证最开始设置正确，权宜之计终归是权宜之计。利用这个脚本，可以实现对页面内容的正确变体转换，然而，在实际使用中，还有一些问题：\r\n\r\n- 需要额外创建繁体标题重定向\r\n- 不支持转换后变体的搜索\r\n\r\n关于第一点，将在下一篇文章提供解决方法。关于第二点，考虑到小 wiki 对搜索正文内容的需求不是很大，暂时只能如此了。\r\n","author":"omvjro","reactions":{"url":"https://api.github.com/repos/omvjro/note/issues/2/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"labels":["published","MediaWiki"]}],"tag":"MediaWiki"},"__N_SSG":true}
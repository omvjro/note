{"pageProps":{"post":{"id":3,"title":"MediaWiki 语言变体补遗","created_at":"2024-05-13T05:16:56Z","updated_at":"2024-05-13T05:17:04Z","content":"如先前所述，利用 JavaScript 实现的变体转换存在需要额外创建繁体标题重定向的问题。和更改站点内容语言一样，对于已有一定规模的 wiki 来说，这是很麻烦的一件事。\r\n\r\n## 手动创建脚本\r\n\r\n利用此脚本可以为每个页面添加快速创建繁体重定向的按钮，所依赖的 API 有 jQuery、[openccjs](https://github.com/nk2028/opencc-js)，以及 MediaWiki 自身提供的 [Action API](https://www.mediawiki.org/wiki/API:Main_page)。\r\n\r\n```js\r\n$(function () {\r\n\r\n// 仅在内容页面启用\r\nif (!mw.config.get( 'wgIsArticle' ) || mw.config.get( 'wgPageContentModel' ) !== 'wikitext') { return }\r\n\r\n// 检查重定向页面是否已存在\r\nconst ifExist = title => {\r\n  return new Promise(resolve => {\r\n    new mw.Api().get({\r\n      action: 'parse',\r\n      page: title,\r\n    }).done(() => {\r\n      resolve(1);\r\n    }).fail(() => {\r\n      resolve(0);\r\n    });\r\n  });\r\n}\r\n\r\n// 添加按钮至“Wiki工具”栏，可按需修改\r\n$('#site-tools ul').append('<li class=\"mw-list-item\" id=\"t-tradredirect\"><a href=\"javascript:;\">创建繁体重定向</a></li>');\r\n\r\ndocument.getElementById('t-tradredirect').addEventListener('click', async () => {\r\n\r\n  const msg = m => document.getElementById('t-tradredirect').innerHTML = m;\r\n  msg('请稍候');\r\n\r\n  let title = mw.config.get('wgPageName');\r\n  // 使用了简体 -> 台繁，如有需要也可增添港繁（将 tw 修改为 hk ）\r\n  const converter = OpenCC.Converter({ from: 'cn', to: 'tw' });\r\n  let tradtitle = converter(title);\r\n  if (tradtitle == title) {\r\n    msg('无需创建繁体重定向');\r\n    return;\r\n  }\r\n  if (await ifExist(tradtitle)) {\r\n    msg('已有繁体重定向');\r\n    return;\r\n  }\r\n  console.log(`${tradtitle} => ${title}`);\r\n\r\n  new mw.Api().postWithToken('csrf', {\r\n    action: 'edit',\r\n    text: `#重定向 [[${title}]]`,\r\n    title: tradtitle,\r\n    summary: `创建繁体重定向`,\r\n    errorformat: 'plaintext'\r\n  }).done(() => {\r\n    msg('创建成功');\r\n  }).fail((a, b, errorThrown) => {\r\n    msg('出错了');\r\n    console.error(errorThrown);\r\n  });\r\n\r\n});\r\n\r\n});\r\n```\r\n\r\n请注意，这里使用了 ES6 语法，若直接插入 `MediaWiki:Common.js` 之类的页面，会出现错误。关于如何正确在 MediaWiki 中使用 ES6，后将撰文记录。\r\n\r\n### Gadget\r\n\r\n可以利用 [Gadgets](https://www.mediawiki.org/wiki/Extension:Gadgets) 插件将脚本设置为可供用户启用，便于编辑者自助添加繁体重定向。\r\n\r\n为避免上述的 ES6 语法问题，首先需在别的页面存储脚本，如在自己的用户页下，此处以 `User:root/redirect.js` 为例。之后，在 `MediaWiki:Gadget-GADGET.js` 中使用 `mw.loader.load` 引入脚本，其中 `GADGET` 指的是为该 Gadget 取的内部名称。在该例中，可为之取名 `redirect`，并在 `MediaWiki:Gadget-redirect.js` 中写下如下代码：\r\n\r\n```js\r\nmw.loader.load( '/w/index.php?title=user:root/redirect.js&action=raw&ctype=text/javascript' );\r\n```\r\n\r\n请留意此处不能直接复制存储页面链接，而应该添加参数使之加载为可执行脚本文件，否则会报错：\r\n\r\n```\r\nbecause its MIME type ('text/html') is not executable\r\n```\r\n\r\n之后，在 `MediaWiki:Gadget-redirect` 中写下关于此 Gadget 的描述，也可以使用 wikitext。\r\n\r\n```wikitext\r\n在 Wiki 工具中增加快速添加繁体重定向的按钮\r\n```\r\n\r\n最后，在 `MediaWiki:Gadgets-definition` 中定义该 Gadget：\r\n\r\n```wikitext\r\n* redirect[ResourceLoader]|redirect.js\r\n```\r\n\r\n启用 Gadget 后，最开始可能会跳出如下警告，并运行失败：\r\n\r\n```\r\nSkipped unavailable module ext.gadget.redirect\r\n```\r\n\r\n但一段时间后即可成功启用，小编也不知道为什么。\r\n\r\n## 处理历史遗留问题\r\n\r\n理论上，使用 Pywikibot 可以更妥当地批量处理先前的页面。然而，[Pywikibot 的文档](https://doc.wikimedia.org/pywikibot/stable/introduction.html)看上去就很麻烦，而且本人 Python 水平比 JavaScript 更低。鉴于 DOL 中文 wiki 页面尚不算多，直接照前文又画了一个 JavaScript 脚本了事。到 wiki 的 `特殊:所有页面`，在每一页打开控制台运行以下脚本即可。\r\n\r\n建议使用机器人账户进行相关操作。\r\n\r\n```js\r\nconst ifExist = title => {\r\n  return new Promise(resolve => {\r\n    new mw.Api().get({\r\n      action: 'parse',\r\n      page: title,\r\n    }).done(() => {\r\n      resolve(1);\r\n    }).fail(() => {\r\n      resolve(0);\r\n    });\r\n  });\r\n}\r\n\r\n// 获取需操作页面的标题\r\nlet link_list = [];\r\ndocument.querySelectorAll('.mw-allpages-body li a').forEach( a => {\r\n\r\n  // 排除重定向页面\r\n  if (a.classList.contains('mw-redirect')) { return; }\r\n\r\n  let title = a.innerText;\r\n  const converter = OpenCC.Converter({ from: 'cn', to: 'tw' });\r\n\r\n  // 排除简繁标题一致页面\r\n  let tradtitle = converter(title);\r\n  if (tradtitle == title) { return; }\r\n\r\n  link_list.push(title);\r\n\r\n});\r\n\r\nlink_list.forEach( async (title) => {\r\n\r\n  const converter = OpenCC.Converter({ from: 'cn', to: 'tw' });\r\n  let tradtitle = converter(title);\r\n  if (await ifExist(tradtitle)) {\r\n    console.log(`${tradtitle} => ${title}已有繁体重定向`);\r\n    return;\r\n  }\r\n\r\n  new mw.Api().postWithToken('csrf', {\r\n    action: 'edit',\r\n    text: `#重定向 [[${title}]]`,\r\n    title: tradtitle,\r\n    bot: true, // 标记为机器人操作，避免刷屏\r\n    summary: `创建繁体重定向`,\r\n    errorformat: 'plaintext'\r\n  }).done(() => {\r\n    console.log(`${tradtitle} => ${title}创建成功`);\r\n  }).fail((a, b, errorThrown) => {\r\n    console.error(`${tradtitle} => ${title}创建出错`);\r\n    console.error(errorThrown);\r\n  });\r\n\r\n});\r\n```\r\n","author":"omvjro","reactions":{"url":"https://api.github.com/repos/omvjro/note/issues/3/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"labels":["published","MediaWiki"]}},"__N_SSG":true}